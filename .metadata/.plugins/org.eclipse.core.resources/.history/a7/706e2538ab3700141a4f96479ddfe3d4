//Authors: Peter Hanson and Desone Burns

//The purpose of this class is to provide a blueprint to create Map objects which contain information
//about the state of the game's map such as the position of the hunter, pits, wumpus, etc.


package huntTheWumpus;

import java.awt.Point;
import java.util.Random;

public class Map 
{
	private Room[][] map;
	private Point wumpus; //the x is the vertical variable (0-vertSize) and the y is the horizontal variable (0-horizSize)
	private Point hunter; //this is backwards from cartesian system but all the code was already in that orientation
	private Point[] pit;
	public static int horizSize = 10;
	public static int vertSize = 10;
	
	Map()
	{
		map = new Room[vertSize][horizSize];
		Random randy = new Random();
		pit = new Point[randy.nextInt(3) + 3];
		
		//System.out.println("Generated " + pit.length + " pits."); only needed statement for testing
		
		
		hunter = new Point(randy.nextInt(vertSize), randy.nextInt(horizSize));
		wumpus = new Point(randy.nextInt(vertSize), randy.nextInt(horizSize));
		
		for(int i = 0; i < pit.length; i++) 
		
			pit[i] = new Point(randy.nextInt(vertSize), randy.nextInt(horizSize));
		
		while(inRange(wumpus, hunter, 3)) //If the generated wumpus coords are less than 2 blocks away, re-randomize them.
			wumpus = new Point(randy.nextInt(vertSize), randy.nextInt(horizSize));
		
		for(Point point : pit) //Makes sure all the generated pits aren't sitting on top of each other or other objects (not including blood, goop, or slime)
		{
			int i = 0;
			boolean tooClose = false;
			for(int j = 0; j < i; j++)
				if(inRange(point, pit[j], 1))
					tooClose = true;
			while(inRange(point, hunter, 2) || inRange(point, wumpus, 1) || tooClose)
			{//The hunter occasionally starts in slime which shouldn't happen
				point = new Point(randy.nextInt(vertSize), randy.nextInt(horizSize));
				for(int j = 0; j < i; j++)
					if(inRange(point, pit[j], 1))
						tooClose = true;
			}
			
			i++;
			System.out.println(i + " pits");
		}
		
		
		  //Where da Wumpus at doe?
		//System.out.println("Wumpus y coord: " + wumpus.y);  //used for testing not for game itself
		
		for(int j = 0; j < vertSize; j++) //Set all the attributes for all the "rooms." 
		{
			for(int i = 0; i < horizSize; i++)
			{
				map[j][i] = new Room();
				Point temp = new Point(j, i);
				if(hunter.equals(temp))
				{
					map[j][i].enableHunter();
					map[j][i].enableExplored();
				}
				if(wumpus.equals(temp)) 
				{
					map[j][i].enableWumpus();
				}
				if(inRange(temp, wumpus, 2))
				{
					map[j][i].enableBlood();
				}
				for(Point point : pit)
				{
					if(point.equals(temp))
						map[j][i].enablePit();
					if(inRange(temp, point, 1))
						map[j][i].enableSlime();
				}
			}
		}
	}
	
	public String toString() //Generates the string that is the map
	{
		String output = "";
		for(int j = 0; j < vertSize; j++)
		{
			for(int i = 0; i < horizSize; i++)
			{
				output += "[" + map[j][i].toString() + "]";
			}
			output += "\n";
		}
		return output;
	}
	
	private boolean inRange(Point reference, Point interest, int distance) //Method for seeing if two points are within a certain distance, and wraps around
	{
		if(reference.distance(interest) <= distance) //Checks if the box in inherently close enough
		
			return true;
		
		
		Point temp = new Point(reference.x, reference.y);

		if(vertSize - reference.x <= distance ) //If the point is on either extreme, it simulates it being on the opposite end of the map
			
			temp.x -= vertSize;
		
		else if(reference.x <= distance )
			
			temp.x += vertSize;
		
		if(temp.distance(interest) <= distance)
		
			return true;
		
		
		temp.x = reference.x; //Set the x coordinate back, so that y is not affected by the previous movement of x to the other side
		
		if(horizSize - reference.y <= distance )
			
			temp.y -= horizSize;
		
		else if( reference.y <= distance )
			
			temp.y += horizSize;
		
		if(temp.distance(interest) <= distance)
		
			return true;
		
		return false;	
		
	}
	
	public Point getHunterLocation()
	{
		for(int i = 0; i < vertSize; i++)
		{
			for(int j = 0; j < horizSize; j++)
			{
				if(map[i][j].containsHunter())
					return new Point(i, j);
			}
		}
		return new Point(0,0); //Will never happen, just a default for java to compile properly
	}

	public void updateHunter(Point position)
	{
		hunter = position;
		for(int i = 0; i < vertSize; i++)
		{
			for(int j = 0; j < horizSize; j++)
			{
				if(i == position.x && j == position.y)
				{
					map[i][j].enableHunter();
					map[i][j].enableExplored();
				}
				else
					map[i][j].disableHunter();
			}
		}
		
	}

	public boolean updateArrow(String direction, Point hunterPosition)
	{
		if(direction == "North" || direction == "South")
		{
			int a = hunterPosition.y;
			for(int j = 0; j < vertSize; j++)
			{
				if(map[j][a].containsWumpus())
				{
					return true;
				}
			}
		}
		if(direction == "East" || direction == "West")
		{
			int a = hunterPosition.x;
			for(int j = 0; j < horizSize; j++)
			{
				if(map[a][j].containsWumpus())
				{
					return true;
				}
			}
		}
		return false;
	}

	public void clearFog() 
	{
		for(int i = 0; i < vertSize; i++)
		{
			for(int j = 0; j < horizSize; j++)
			{
				map[i][j].enableExplored();
			}
		}
	}

	public int roomMessage()
	{
		if(map[hunter.x][hunter.y].containsWumpus())
			return 5;
		if(map[hunter.x][hunter.y].containsPit())
			return 4;
		if(map[hunter.x][hunter.y].containsGoop())
			return 2;
		if(map[hunter.x][hunter.y].containsBlood())
			return 1;
		if(map[hunter.x][hunter.y].containsSlime())
			return 3;
		if(map[hunter.x][hunter.y].containsBat())
			return 6;
		return 0;
	}
		
}