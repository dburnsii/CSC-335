//Authors: Peter Hanson and Desone Burns

//The purpose of this class is to test and insure that the classes in this package are working properly with
//Junit testing.

//No longer needed, game has a main method.

package huntTheWumpus;

import static org.junit.Assert.*;

import java.awt.Point;

import org.junit.Test;

public class GameTest 
{

	@Test
	public void testRoom()
	{
		Map map = new Map();
		assertTrue(map.toString().contains("[O]"));
	}
	
	@Test
	public void testSlime()
	{
		Point[] pits = {new Point(4,5), new Point(7,7)};
		Map map = new Map(new Point(5,5), new Point(0,0), pits);
		map.updateHunter(new Point(6,5));
		assertTrue(map.toString().contains("[S]"));
	}
	
	@Test
	public void testBlood()
	{
		Point[] pits = {new Point(4,5), new Point(7,7)};
		Map map = new Map(new Point(0,2), new Point(0,0), pits);
		map.updateHunter(new Point(0,3));
		assertTrue(map.toString().contains("[B]"));
	}
	
	@Test
	public void testGoop()
	{
		Point[] pits = {new Point(0,3), new Point(7,7)};
		Map map = new Map(new Point(0,2), new Point(0,0), pits);
		map.updateHunter(new Point(1,2));
		assertTrue(map.toString().contains("[G]"));
	}
	
	@Test
	public void testPit()
	{
		Point[] pits = {new Point(5,5), new Point(7,7)};
		Map map = new Map(new Point(5,5), new Point(0,0), pits);
		map.updateHunter(new Point(6,5));
		assertTrue(map.toString().contains("[P]"));
	}
	
	@Test
	public void testWumpus()
	{
		Point[] pits = {new Point(4,5), new Point(7,7)};
		Map map = new Map(new Point(0,0), new Point(0,0), pits);
		map.updateHunter(new Point(0,1));
		assertTrue(map.toString().contains("[W]"));
	}
	
	@Test
	public void testPitDeath()
	{
		Map gameMap = new Map();
		Point[] pits = {new Point(4,5), new Point(7,7)};
		gameMap =  new Map(new Point(5,5), new Point(0,0), pits);
		gameMap.updateHunter(new Point(4,5));
		assertEquals(4, gameMap.roomMessage());
	}
	
	@Test
	public void testWumpusDeath()
	{
		Map gameMap = new Map();
		Point[] pits = {new Point(4,5), new Point(7,7)};
		gameMap =  new Map(new Point(0,1), new Point(0,0), pits);
		gameMap.updateHunter(new Point(0,0));
		assertEquals(5, gameMap.roomMessage());
	}
	
	@Test
	public void testSlimeSpawn()
	{
		boolean spawnedOnSlime = false;
		Map game;
		for(int i = 0; i < 1000; i++)
		{
			game = new Map();
			game.updateHunter(new Point(0,0));
			if(game.toString().contains("[S]"))
				spawnedOnSlime = true;
		}
		assertFalse(spawnedOnSlime);
	}
	
	@Test
	public void testWumpusSpawn()
	{
		boolean spawnedOnWumpus = false;
		Map game;
		for(int i = 0; i < 1000; i++)
		{
			game = new Map();
			game.updateHunter(new Point(0,0));
			if(game.toString().contains("[W]"))
				spawnedOnWumpus = true;
		}
		assertFalse(spawnedOnWumpus);
	}
	
	@Test
	public void testArrow()
	{
		Game game = new Game();
		Point[] pits = {new Point(4,5), new Point(7,7)};
		game.gameMap =  new Map(new Point(0,5), new Point(0,0), pits);
		game.gameMap.updateArrow("West" , new Point(5,0));
		assertTrue(game.gameWon);
	}
	
	

}